map $http_upgrade $connection_upgrade {
    default upgrade;
    '' close;
}

server {
    # Drop any request that does not match any of the other server names.
    listen  80 default_server;
    listen  [::]:80 default_server;

    server_name _;
    return  444; #CONNECTION CLOSED WITHOUT RESPONSE
}

server {
    # Drop any request that does not match any of the other server names.
    listen  443 ssl default_server;
    listen  [::]:443 ssl default_server;
    
    ssl_reject_handshake on;
}

server {
    listen 80;
    listen [::]:80;

    http2 on;

    server_name $DOMAIN1;
    server_tokens off;

    # Only allow access if the host is correct
    if ( $host != "$DOMAIN1" ){
        return 444; #CONNECTION CLOSED WITHOUT RESPONSE
    }

    location /.well-known/acme-challenge/ {
        root /var/www/certbot;
    }

    location / {
        return 301 https://$host$request_uri;
    }
}

server {
    listen 443 ssl;
    listen [::]:443 ssl;

    http2 on;

    server_name $DOMAIN1;
    server_tokens off;

    if ( $host != "$DOMAIN1" ){
        return 444; #CONNECTION CLOSED WITHOUT RESPONSE
    }

    client_max_body_size 100m;

    # Generate local certificates to test ssl with:
    # `openssl req -newkey rsa:4096 -x509 -sha512 -days 365 -nodes -out localhost_bundle.crt -keyout localhost.key -subj "/C=US/ST=Ohio/L=Cleveland /O=AI4EDU/OU=dev/CN=au4edudev/emailAddress=."`
    # If you are first time local testing, do the following BEFORE running the above command (at the root of the project):
    # `mkdir -p ssl && cd ssl`
    ssl_certificate /etc/letsencrypt/live/$DOMAIN1/fullchain.pem;
    ssl_certificate_key /etc/letsencrypt/live/$DOMAIN1/privkey.pem;

    ssl_protocols TLSv1.2 TLSv1.3;
    ssl_ecdh_curve X25519:prime256v1:secp384r1;
    ssl_ciphers ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-CHACHA20-POLY1305:ECDHE-RSA-CHACHA20-POLY1305:DHE-RSA-AES128-GCM-SHA256:DHE-RSA-AES256-GCM-SHA384:DHE-RSA-CHACHA20-POLY1305:!MD5;
    ssl_prefer_server_ciphers off;
    ssl_session_timeout 1d;
    ssl_session_cache shared:MozSSL:10m;  # about 40000 sessions
    ssl_dhparam "/etc/nginx/ssl/dhparam.pem";
    add_header Strict-Transport-Security "max-age=31536000" always;
    error_page 497  https://$host$request_uri;
    resolver 127.0.0.11 ipv6=off valid=10s;

    location /v1/prod/ {
        proxy_set_header Host $http_host;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
        proxy_set_header Upgrade $http_upgrade;
        proxy_set_header Connection $connection_upgrade;
        proxy_redirect off;
        proxy_buffering off;
        proxy_pass http://prepit-edge-prod-server:5001;
    }

    location / {
        return 404;
    }

}